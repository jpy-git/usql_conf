[metadata]
name = usql-conf
version = attr: usql_conf.__version__
description = CLI for Managing SQL Connection Strings used in usql CLI
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/pycqa/flake8
author = Joe Young
author_email = josephyoung.jpy@gmail.com
license = MIT
license_file = LICENSE
keywords =
    usql
classifiers =
    Development Status :: 3 - Alpha
    Intended Audience :: Developers
    Environment :: Console
    License :: OSI Approved :: MIT License
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: Implementation :: CPython

[options]
packages = find:
install_requires =
    click
python_requires = >=3.6

[options.packages.find]
exclude =
    tests*

[options.entry_points]
console_scripts =
    usql_conf = usql_conf.cli:main

[options.package_data]
usql_conf = py.typed

[flake8]
# annotations (ANN), bugbear (B + B9), black (BLK), mccabe (C), docstrings (D), darglint (DAR), pycodestyle (E), pyflakes (F), import-order (I), bandit (S), pycodestyle (W).
select = ANN,B,B9,BLK,C,D,DAR,E,F,I,S,W
# Ignore required self typing (ANN101), whitespace before ':' (E203), built-in line length (E501), line break before binary operator (W503).
ignore = ANN101,E203,E501,W503
# Flag local imports (I).
application-import-names = usql_conf,tests
# Utilise Google style guide for imports (I).
import-order-style = google
# Ignore Bandit (S) assertion warnings in tests/ folder.
per-file-ignores = tests/*:S101
# Utilise Google style guide for docstrings (D).
docstring-convention = google
# Max allowed code complexity (C).
max-complexity = 10
# Bugbear (B) checks maximum line length with a tolerance margin of 10%
max-line-length = 80
# Print the total number of errors.
count = True
# Print the source code generating the error/warning in question.
show-source = True
# Count the number of occurrences of each error/warning code and print a report.
statistics = True

[darglint]
strictness = short

[coverage:run]
plugins = covdefaults

[mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_unused_ignores = true

[mypy-tests.*]
disallow_untyped_defs = false
